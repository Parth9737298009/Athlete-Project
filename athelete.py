# -*- coding: utf-8 -*-
"""Athelete.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jAz3H1x96EJOC24vDHEh0yfaZjeMM4qG
"""

pip install pandas

pip install numpy

pip install matplotlib

pip install seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import csv

#---------------------------------------------------- BASIC QUESTIONS -------------------------------------------------------------------

#  1. Data Exploration: How many rows and columns does the dataset have?

df = pd.read_csv('/content/athlete_events.csv')
rows, columns = df.shape
print(f'The athelete_events csv file has {rows} rows and {columns} columns.')


df = pd.read_csv('/content/noc_regions.csv')
rows, columns = df.shape
print(f'The noc_regions csv file has {rows} rows and {columns} columns.')

#  2. Unique Values: How many unique sports are there in the dataset?

df = pd.read_csv('/content/athlete_events.csv')
unique_sports = df['Sport'].nunique()
print(f'there are {unique_sports} unique sports in the dataset.')

#  3. Gender Distribution: What is the distribution of male and female athletes?

df = pd.read_csv('/content/athlete_events.csv')
gender_counts = df['Sex'].value_counts()
print(gender_counts)

#   4. Age Statistics: What are the minimum, maximum, and average ages of the athletes?

min = df['Age'].min()
max = df['Age'].max()
print(f"The minimun age is {min} and the maximum age is {max}")

#  5. Medal Count: How many medals were won in total? Break it down by Gold, Silver, and Bronze.

medal = df['Medal'].value_counts()
Gold = medal['Gold']
Silver = medal['Silver']
Bronze = medal['Bronze']
medal_count = Gold + Silver + Bronze
print(f"the total medals are {medal_count}, in which {Gold} are Gold, {Silver} are Silver and {Bronze} are Bronze")

#  6. Top Teams: Which team has the most athletes represented?

team_counts = df['Team'].value_counts()
top_team = team_counts.idxmax()
top_team_count = team_counts.max()
print(f'The team with the most athletes represented is {top_team} with {top_team_count} athletes.')

#  7. Missing Data: Which columns have missing values, and how many?

df = pd.read_csv('/content/athlete_events.csv')
missing = df.isnull().sum()
missing = missing[missing > 0]
print(missing)

#---------------------------------------------------- INTERMEDIATE QUESTIONS ------------------------------------------------------------

# 8. Height and Weight Distribution: What is the distribution of heights and weights of the athletes? Use histograms for visualization.

df = pd.read_csv('/content/athlete_events.csv')
plt.figure(figsize=(10, 5))  #creates a new figure for plotting , 10inch tall, 5inch wide
plt.hist(df['Height'].dropna(), bins=30, edgecolor='yellow', alpha=0.7)  #creates Histogram for height (hist), bins = bars, alpha = transparency
plt.title('Distribution of Athletes\' Heights')  #title
plt.xlabel('Height (cm)')   # X-axis label
plt.ylabel('Frequency')     #Y-axis label
plt.grid(True)  #adds grid lines
plt.show()

#  9. Age Distribution by Gender: Plot the age distribution for male and female athletes.

df = pd.read_csv('/content/athlete_events.csv')
male_athletes = df[df['Sex'] == 'M']  #  only male athletes
female_athletes = df[df['Sex'] == 'F']  #  only female athletes
plt.figure(figsize=(10, 5))  # figure size to 10 inches by 5 inches
plt.hist(male_athletes['Age'].dropna(), bins=30, edgecolor='green', alpha=0.7, label='Male')  # male athelete age
plt.hist(female_athletes['Age'].dropna(), bins=30, edgecolor='pink', alpha=0.7, label='Female')  # female athelete age
plt.title('Age Distribution by Gender')  # Title
plt.xlabel('Age')  # x-axis label as 'Age'
plt.ylabel('Frequency')  # y-axis laber as 'Frequency'
plt.legend()  # Add a legend to distinguish between male and female distributions
plt.grid(True)
plt.show()

#  10. Medals by Country: Which country has won the most medals? Create a bar chart.

df = pd.read_csv('/content/athlete_events.csv')
medals_df = df.dropna(subset=['Medal']) #Remove cells where Column has none value
medals_by_country = medals_df.groupby('NOC')['Medal'].count() #group by NOC and count the medal
medals_by_country = medals_by_country.sort_values(ascending=False) #sort the counts in descending order
plt.figure(figsize=(20, 7))
medals_by_country.plot(kind='bar', color='Green', edgecolor='Black')
plt.title('Number of Medals by Country')
plt.xlabel('Country')
plt.ylabel('Number of Medals')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()

# 11. Height vs. Weight: Create a scatter plot to show the relationship between height and weight.

df = pd.read_csv('/content/athlete_events.csv')
df_filtered = df.dropna(subset=['Height', 'Weight'])
plt.figure(figsize=(10, 6))
plt.scatter(df_filtered['Height'], df_filtered['Weight'], alpha=0.5)
plt.title('Height vs. Weight of Athletes')
plt.xlabel('Height (cm)')
plt.ylabel('Weight (kg)')
plt.grid(True)
plt.show()

# 12. Age vs. Medals: Is there a correlation between the age of athletes and the number of medals won?

df = pd.read_csv('/content/athlete_events.csv')
df_filtered = df.dropna(subset=['Age', 'Medal'])
df_filtered['Medal_Count'] = 1 # Create a new column 'Medal_Count' and set its value to 1 for each row
medals_by_age = df_filtered.groupby(['ID', 'Age'])['Medal_Count'].sum().reset_index()
correlation = medals_by_age['Age'].corr(medals_by_age['Medal_Count'])  # Calculate Correlation Coefficient
plt.figure(figsize=(10, 6))
plt.scatter(medals_by_age['Age'], medals_by_age['Medal_Count'], alpha=0.5)
plt.title(f'Age vs. Medals Won (Correlation: {correlation:.2f})')
plt.xlabel('Age')
plt.ylabel('Number of Medals')
plt.grid(True)
plt.show()

# 13. Participation Over Time: How has the number of participating athletes changed over the years?

df = pd.read_csv('/content/athlete_events.csv')
athletes_per_year = df.groupby('Year')['ID'].nunique()
plt.figure(figsize=(10, 6))
plt.plot(athletes_per_year.index, athletes_per_year.values, marker='o')
plt.title('Number of Participating Athletes Over Time')
plt.xlabel('Year')
plt.ylabel('Number of Athletes')
plt.grid(True)
plt.show()

# 14. Top Sports: Which sports have the most athletes? Create a bar chart.

df = pd.read_csv('/content/athlete_events.csv')
athletes_per_sport = df.groupby('Sport')['ID'].nunique()
top_sports = athletes_per_sport.sort_values(ascending=False).head(10)  # sort the sports by count and select first 10
plt.figure(figsize=(12, 8))
top_sports.plot(kind='bar')
plt.title('Top 10 Sports by Number of Athletes')
plt.xlabel('Sport')
plt.ylabel('Number of Athletes')
plt.xticks(rotation=20)
plt.grid(axis='y')
plt.show()

# 15. City Hosting: How many times has each city hosted the Olympics?

df = pd.read_csv('/content/athlete_events.csv')
cities_hosting_counts = df['City'].value_counts()
sorted_cities_hosting_counts = cities_hosting_counts.sort_values(ascending=False)  # sort count in descending order
plt.figure(figsize=(29, 10))
sorted_cities_hosting_counts.plot(kind='bar')
plt.title('Number of Times Each City Has Hosted the Olympics')
plt.xlabel('City')
plt.ylabel('Number of Times Hosted')
plt.xticks(rotation=45)
plt.grid(axis='y')  # Add a grid to the y-axis
plt.show()

#----------------------------------------------------------------------------- ADVANCED QUESTIONS ------------------------------------------------------------------------------

# 16. Medals by Season: Compare the number of medals won in Summer vs. Winter Olympics.

df = pd.read_csv('/content/athlete_events.csv')
medals_df = df[df['Medal'].notna()]
medals_by_season = medals_df['Season'].value_counts()
plt.figure(figsize=(8, 6))
medals_by_season.plot(kind='bar', color=['blue', 'red'])
plt.title('Number of Medals Won in Summer vs. Winter Olympics')
plt.xlabel('Season')
plt.ylabel('Number of Medals')
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.show()

# 17. Team Performance: Analyse the performance of top teams over different years.

df = pd.read_csv('/content/athlete_events.csv')
medals_df = df[df['Medal'].notna()]
medals_by_team = medals_df['NOC'].value_counts()
top_teams = medals_by_team.head(10).index
medals_by_year_and_team = medals_df[medals_df['NOC'].isin(top_teams)].groupby(['Year', 'NOC']).size().unstack(fill_value=0)
medals_by_year_and_team.plot(kind='line', marker='o', figsize=(18, 7))
plt.title('Performance of Top Teams Over the Years')
plt.xlabel('Year')
plt.ylabel('Number of Medals')
plt.legend(title='Team')
plt.grid(True)
plt.show()

# 18. Height and Weight Over Time: How have the average height and weight of athletes changed over the years?

df = pd.read_csv('/content/athlete_events.csv')
df_filtered = df.dropna(subset=['Height', 'Weight'])
average_height_weight = df_filtered.groupby('Year')[['Height', 'Weight']].mean()
plt.figure(figsize=(14, 7))
plt.plot(average_height_weight.index, average_height_weight['Height'], label='Average Height', marker='o')
plt.plot(average_height_weight.index, average_height_weight['Weight'], label='Average Weight', marker='o', color='red')
plt.title('Average Height and Weight of Athletes Over the Years')
plt.xlabel('Year')
plt.ylabel('Average Value')
plt.legend()
plt.grid(True)
plt.show()

# 19. Medal Predictions: Can you predict the likelihood of winning a medal based on age, height, weight, and gender using a logistic regression model?

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
df = pd.read_csv('/content/athlete_events.csv')
df['MedalBinary'] = df['Medal'].notna().astype(int)
df['Sex'] = df['Sex'].map({'M': 1, 'F': 0})
features = ['Age', 'Height', 'Weight', 'Sex']
df_filtered = df.dropna(subset=features + ['MedalBinary'])
X = df_filtered[features]  # Features
y = df_filtered['MedalBinary']  # Target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()  # Create a StandardScaler object
X_train_scaled = scaler.fit_transform(X_train)  # Fit and transform the training data
X_test_scaled = scaler.transform(X_test)  # Transform the testing data
model = LogisticRegression(max_iter=10000)  # Create a logistic regression model with a higher max_iter
model.fit(X_train_scaled, y_train)  # Train the model using the training data
y_pred = model.predict(X_test_scaled)  # Predict the target variable for the testing data
print(classification_report(y_test, y_pred))  # Print the classification report
print(confusion_matrix(y_test, y_pred))  # Print the confusion matrix
y_pred_proba = model.predict_proba(X_test_scaled)[:, 1]  # Predict the probability of winning a medal
df_predictions = pd.DataFrame({'Age': X_test['Age'], 'Height': X_test['Height'], 'Weight': X_test['Weight'], 'Sex': X_test['Sex'], 'MedalProbability': y_pred_proba})  # Create a DataFrame with the predictions
print(df_predictions.head())  # Print the first few rows of the predictions DataFrame

# 20. Clustering Sports: Use clustering techniques (like K-Means) to group sports based on the physical attributes (height, weight, age) of their athletes.

from sklearn.cluster import KMeans  # Import KMeans algorithm
from sklearn.preprocessing import StandardScaler  # Import scaler for feature normalization
df = pd.read_csv('/content/athlete_events.csv')
features = ['Age', 'Height', 'Weight']  # List of features to be used for clustering
df_filtered = df.dropna(subset=features + ['Sport'])
X = df_filtered[features]
sports = df_filtered['Sport']  # Target variable (Sports)
scaler = StandardScaler()  # Create a StandardScaler object
X_scaled = scaler.fit_transform(X)  # Fit and transform the data
kmeans = KMeans(n_clusters=5, random_state=42)  # Create a KMeans model with 5 clusters
df_filtered['Cluster'] = kmeans.fit_predict(X_scaled)  # Fit the model and predict the clusters
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)  # Get the cluster centers and inverse transform them to original scale
plt.figure(figsize=(14, 7))
sns.scatterplot(data=df_filtered, x='Height', y='Weight', hue='Cluster', palette='viridis', s=100, alpha=0.6)  # Create a scatter plot
plt.scatter(cluster_centers[:, 1], cluster_centers[:, 2], s=300, c='red', label='Centroids')  # Plot the centroids
plt.title('Clusters of Sports Based on Physical Attributes')
plt.xlabel('Height (cm)')
plt.ylabel('Weight (kg)')
plt.legend()
plt.show()
sport_clusters = df_filtered.groupby(['Cluster', 'Sport']).size().unstack(fill_value=0)  # Group by cluster and sport
print(sport_clusters)  # Print the count of sports in each cluster